import os
import logging
import shlex
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import Application, CommandHandler, ChatMemberHandler, ContextTypes
from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
load_dotenv(dotenv_path='.env.local')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get('TELEGRAM_TOKEN')
CHANNEL_USERNAME = os.environ.get('CHANNEL_USERNAME')
MONGODB_URI = os.environ.get('MONGODB_URL')
ADMIN_IDS = [int(id) for id in os.environ.get('ADMIN_IDS', '').split(',')]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = AsyncIOMotorClient(MONGODB_URI)
db = client.lottery_db

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:

    user_id = update.effective_user.id
    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π deep linking
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args and context.args[0].startswith('register_'):
        ticket_number = context.args[0].split('_')[1]
        await register(update, context, ticket_number)
    else:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å –ö–û–î–æ–º –±–∏–ª–µ—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –±–∏–ª–µ—Ç–∞
async def check_ticket_code(ticket_number: str) -> bool:
    ticket = await db.tickets.find_one({'_id': ticket_number})

    return bool(ticket)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–∏–ª–µ—Ç–∞
async def get_ticket_description(ticket_number: str) -> str:
    ticket = await db.tickets.find_one({'_id': ticket_number})

    return ticket['description'] if ticket else None

# –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def notify_admins(update: Update, context: ContextTypes.DEFAULT_TYPE, ticket_description: str):
    count = await db.participants.count_documents({})
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"{ticket_description} –∏ @{update.effective_user.username} —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –ª–æ—Ç–µ—Ä–µ–µ! (–í—Å–µ–≥–æ: { count })"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE, ticket_number=None):
    if not ticket_number:
        if len(context.args) != 1:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /register –ö–û–î_–ë–ò–õ–ï–¢–ê")
            return
        ticket_number = context.args[0]
    if not await check_ticket_code(ticket_number):
        await update.message.reply_text("–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    user_id = update.effective_user.id
    username = update.effective_user.username
    user_fullname = update.effective_user.full_name
    ticket_description = await get_ticket_description(ticket_number)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    existing_ticket = await db.participants.find_one({'ticket_number': ticket_number})
    if existing_ticket:
        await update.message.reply_text(f"{ ticket_description } —É–∂–µ –∑–∞–Ω—è—Ç!")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await check_subscription(update, context)

    if is_subscribed:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await db.participants.insert_one({
            'ticket_number': ticket_number,
            'user_id': user_id,
            'username': username,
            'user_fullname': user_fullname,
            'is_subscribed': True,
            'registered_at': datetime.utcnow(),
            'is_winner': False
        })
        await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ! –í–∞–º –ø–æ–º–æ–≥–∞–µ—Ç { ticket_description }!")
        await notify_admins(update, context, ticket_description)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ
        await db.pending_registrations.insert_one({
            'user_id': user_id,
            'ticket_number': ticket_number,
            'created_at': datetime.utcnow(),
            'is_processed': False
        })
        await update.message.reply_text(
            f"{ ticket_description } –∑–æ–≤—ë—Ç –≤–∞—Å –≤ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}!"
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞
async def register_offline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = update.message.text

    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    command_parts = message_text.split(maxsplit=1)
    if len(command_parts) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /register_offline –ö–û–î_–ë–ò–õ–ï–¢–ê \"–ò–ú–Ø\" –¢–ï–õ–ï–§–û–ù")
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
    try:
        args = shlex.split(command_parts[1])
        if len(args) < 3:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /register_offline –ö–û–î_–ë–ò–õ–ï–¢–ê \"–ò–ú–Ø\" –¢–ï–õ–ï–§–û–ù")
            return

        ticket_number = args[0]
        full_name = args[1]  # –¢–µ–ø–µ—Ä—å –∏–º—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö –±—É–¥–µ—Ç –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        phone = args[2]


    except ValueError as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–≤—ã—á–∫–∏.")
        return

    if not await check_ticket_code(ticket_number):
        await update.message.reply_text("–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    existing_ticket = await db.participants.find_one({'ticket_number': ticket_number})
    if existing_ticket:
        await update.message.reply_text("–≠—Ç–æ—Ç –±–∏–ª–µ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    ticket_description = await get_ticket_description(ticket_number)
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞
    await db.participants.insert_one({
        'ticket_number': ticket_number,
        'full_name': full_name,
        'phone': phone,
        'is_subscribed': True,
        'registered_at': datetime.utcnow(),
        'is_winner': False,
        'is_offline': True
    })

    await update.message.reply_text(
        f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ñ—Ñ–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫:\n"
        f"–ë–∏–ª–µ—Ç: `{ticket_description}`\n"
        f"–ò–º—è: {full_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def track_channel_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = update.chat_member
    if not result:
        return

    if result.new_chat_member.status == 'member':
        user_id = result.new_chat_member.user.id
        username = result.new_chat_member.user.username
        user_fullname = result.new_chat_member.user.full_name

        # –ü–æ–∏—Å–∫ –æ–∂–∏–¥–∞—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        pending = await db.pending_registrations.find_one({
            'user_id': user_id,
            'is_processed': False
        })

        if pending:
            ticket_number = pending['ticket_number']
            ticket_description = await get_ticket_description(ticket_number)

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            await db.participants.insert_one({
                'ticket_number': ticket_number,
                'user_id': user_id,
                'username': username,
                'is_subscribed': True,
                'registered_at': datetime.utcnow(),
                'is_winner': False
            })

            # –û—Ç–º–µ—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
            await db.pending_registrations.update_one(
                {'_id': pending['_id']},
                {'$set': {'is_processed': True}}
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üéâ –¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ! –í–∞–º –ø–æ–º–æ–≥–∞–µ—Ç { ticket_description }!"
            )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
async def register_winner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")
        return

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /register_winner –ö–û–î_–ë–ò–õ–ï–¢–ê –ù–ê–ó–í–ê–ù–ò–ï_–í–´–ò–ì–†–´–®–ê")
        return

    ticket_number = context.args[0]
    prize = " ".join(context.args[1:])

    # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participant = await db.participants.find_one({'ticket_number': ticket_number})

    if not participant:
        await update.message.reply_text("–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    # –û—Ç–º–µ—á–∞–µ–º –±–∏–ª–µ—Ç –∫–∞–∫ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π
    await db.participants.update_one(
        {'ticket_number': ticket_number},
        {'$set': {'is_winner': True, 'prize': prize, 'won_at': datetime.utcnow()}}
    )

    ticket_description = await get_ticket_description(ticket_number)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
    if 'user_id' in participant:  # –û–Ω–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫
        winner_info = f"@{participant['username']} ({participant['user_fullname']})"
        try:
            await context.bot.send_message(
                chat_id=participant['user_id'],
                text=f"üéâ –£—Ä–∞! { ticket_description } –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç –≤–∞—Å —Å –ø–æ–±–µ–¥–æ–π! –í–∞—à –ø—Ä–∏–∑ ‚Äî { prize }!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")
    else:  # –û—Ñ—Ñ–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫
        winner_info = f"{participant['full_name']} (—Ç–µ–ª: {participant['phone']})"

    await update.message.reply_text(
        f"–ë–∏–ª–µ—Ç '{ticket_description}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π!\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_info}\n"
        f"–ü—Ä–∏–∑: {prize}"
    )

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    #await context.bot.send_message(
    #    chat_id=CHANNEL_USERNAME,
    #    text=f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!\n–ë–∏–ª–µ—Ç: {ticket_number}"
    #)

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
async def list_winners(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")
        return

    winners = await db.participants.find({'is_winner': True}).to_list(length=None)

    if not winners:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return

    winners_text = "üèÜ –°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n\n"
    for winner in winners:
        if 'username' in winner:
            winner_info = f"@{winner['username']}\n{ winner['user_fullname']}"
        else:
            winner_info = f"{winner['full_name']} (—Ç–µ–ª: {winner['phone']})"
        winners_text += f"–ü—Ä–∏–∑: { winner['prize']}\n–ë–∏–ª–µ—Ç: {winner['ticket_number']}\n{winner_info}\n\n"

    await update.message.reply_text(winners_text)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("register", register))
    application.add_handler(CommandHandler("register_offline", register_offline))
    application.add_handler(CommandHandler("register_winner", register_winner))
    application.add_handler(CommandHandler("list_winners", list_winners))
    application.add_handler(ChatMemberHandler(track_channel_subscription, ChatMemberHandler.CHAT_MEMBER))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=['message', 'chat_member'])

if __name__ == '__main__':
    main()
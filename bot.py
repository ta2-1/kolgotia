import os
import logging

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
CHANNEL_USERNAME = '@tennis_bolshe'
ADMIN_IDS = [102395366]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def get_db():
    return sqlite3.connect('/data')
    
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS participants (
            ticket_number TEXT PRIMARY KEY,
            user_id INTEGER NULL,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å NULL –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            username TEXT NULL,    # –ú–æ–∂–µ—Ç –±—ã—Ç—å NULL –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            full_name TEXT NULL,   # –ò–º—è –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            phone TEXT NULL,       # –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            is_subscribed BOOLEAN,
            is_winner BOOLEAN DEFAULT FALSE)
    ''')
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user_id = update.effective_user.id
    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def generate_registration_link(ticket_number):
    bot_username = 'your_bot_username'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    deep_link = f'https://t.me/{bot_username}?start=register_{ticket_number}'
    return deep_link

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π deep linking
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args and context.args[0].startswith('register_'):
        ticket_number = context.args[0].split('_')[1]
        await register(update, context, ticket_number)
    else:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –±–∏–ª–µ—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE, ticket_number=None):
    if not ticket_number:
        if len(context.args) != 1:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /register –ù–û–ú–ï–†_–ë–ò–õ–ï–¢–ê")
            return
        ticket_number = context.args[0]

    user_id = update.effective_user.id
    username = update.effective_user.username

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await check_subscription(update, context)
    if not is_subscribed:
        await update.message.reply_text(f"–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = get_db()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO participants 
            (ticket_number, user_id, username, is_subscribed) 
            VALUES (?, ?, ?, ?)
        ''', (ticket_number, user_id, username, True))
        conn.commit()
        await update.message.reply_text(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –±–∏–ª–µ—Ç–æ–º {ticket_number}!")
    except sqlite3.IntegrityError:
        await update.message.reply_text("–≠—Ç–æ—Ç –±–∏–ª–µ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    finally:
        conn.close()


# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ñ—Ñ–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async def register_offline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    # –ü—Ä–∏–º–µ—Ä: /register_offline –ù–û–ú–ï–†_–ë–ò–õ–ï–¢–ê "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤" +79001234567
    if len(context.args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /register_offline –ù–û–ú–ï–†_–ë–ò–õ–ï–¢–ê \"–ò–ú–Ø\" –¢–ï–õ–ï–§–û–ù")
        return

    ticket_number = context.args[0]
    full_name = context.args[1]
    phone = context.args[2]

    conn = get_db()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO participants 
            (ticket_number, full_name, phone, is_subscribed) 
            VALUES (?, ?, ?, ?)
        ''', (ticket_number, full_name, phone, True))
        conn.commit()
        await update.message.reply_text(
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ñ—Ñ–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫:\n"
            f"–ë–∏–ª–µ—Ç: {ticket_number}\n"
            f"–ò–º—è: {full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        )
    except sqlite3.IntegrityError:
        await update.message.reply_text("–≠—Ç–æ—Ç –±–∏–ª–µ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    finally:
        conn.close()


# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async def register_winner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")
        return

    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /register_winner –ù–û–ú–ï–†_–ë–ò–õ–ï–¢–ê")
        return

    ticket_number = context.args[0]
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞
        cursor.execute('SELECT * FROM participants WHERE ticket_number = ?', (ticket_number,))
        participant = cursor.fetchone()
        
        if not participant:
            await update.message.reply_text("–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –û—Ç–º–µ—á–∞–µ–º –±–∏–ª–µ—Ç –∫–∞–∫ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π
        cursor.execute('''
            UPDATE participants 
            SET is_winner = TRUE 
            WHERE ticket_number = ?
        ''', (ticket_number,))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
        cursor.execute('''
            SELECT user_id, username, full_name, phone 
            FROM participants 
            WHERE ticket_number = ?
        ''', (ticket_number,))
        winner = cursor.fetchone()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
        if winner[0]:  # –ï—Å–ª–∏ –µ—Å—Ç—å user_id (–æ–Ω–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫)
            winner_info = f"@{winner[1]}"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
            try:
                await context.bot.send_message(
                    chat_id=winner[0],
                    text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–∏–ª–µ—Ç {ticket_number} –≤—ã–∏–≥—Ä–∞–ª –≤ –ª–æ—Ç–µ—Ä–µ–µ!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")
        else:  # –û—Ñ—Ñ–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫
            winner_info = f"{winner[2]} (—Ç–µ–ª: {winner[3]})"

        await update.message.reply_text(
            f"–ë–∏–ª–µ—Ç {ticket_number} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π!\n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_info}"
        )

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ
        await context.bot.send_message(
            chat_id=CHANNEL_USERNAME,
            text=f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!\n–ë–∏–ª–µ—Ç: {ticket_number}"
        )

    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async def list_winners(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")
        return

    conn = get_db()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT ticket_number, username, full_name, phone 
        FROM participants 
        WHERE is_winner = TRUE
    ''')
    winners = cursor.fetchall()
    
    if not winners:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return

    winners_text = "üèÜ –°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n\n"
    for winner in winners:
        ticket, username, full_name, phone = winner
        if username:
            winner_info = f"@{username}"
        else:
            winner_info = f"{full_name} (—Ç–µ–ª: {phone})"
        winners_text += f"–ë–∏–ª–µ—Ç {ticket}: {winner_info}\n"

    await update.message.reply_text(winners_text)
    conn.close()


def main():
    init_database()
    load_dotenv()

    token = os.environ["TELEGRAM_BOT_TOKEN"]
    
    # Init app
    application = Application.builder().token(token).build()
    
    # Register command handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("register", register))
    application.add_handler(CommandHandler("register_offline", register_offline))
    application.add_handler(CommandHandler("register_winner", register_winner))
    application.add_handler(CommandHandler("list_winners", list_winners))
    
    application.run_polling()


if __name__ == '__main__':
    main()